# -*- coding: utf-8 -*-
"""task3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GDJqFRlhY-plgBVmabZo_A9-L1sDZwUL
"""

\! pip install pyspark

from pyspark.sql import SparkSession

#Create a spark session
spark=SparkSession.builder \
  .appName("Movies") \
  .getOrCreate()

from pyspark.sql import SparkSession
from pyspark.sql.functions import col

# Create a Spark session
spark = SparkSession.builder \
    .appName("Create CSV File") \
    .getOrCreate()

# Sample data
data = [
    (1, "Inception", "Sci-Fi", 8.8, 830000000, "2010-07-16"),
    (2, "The Dark Knight", "Action", 9.0, 1004000000, "2008-07-18"),
    (3, "Interstellar", "Sci-Fi", 8.6, 677000000, "2014-11-07"),
    (4, "Avengers: Endgame", "Action", 8.4, 2797000000, "2019-04-26"),
    (5, "The Lion King", "Animation", 8.5, 1657000000, "1994-06-15"),
    (6, "Toy Story 4", "Animation", 7.8, 1073000000, "2019-06-21"),
    (7, "Frozen II", "Animation", 7.0, 1450000000, "2019-11-22"),
    (8, "Joker", "Drama", 8.5, 1074000000, "2019-10-04"),
    (9, "Parasite", "Drama", 8.6, 258000000, "2019-05-30")
]

# Define schema
schema = ["movie_id", "title", "genre", "rating", "box_office", "date"]

# Create DataFrame
df = spark.createDataFrame(data, schema)

# Define the CSV file path
csv_file_path = "/content/movies_output.csv"

# Write DataFrame to CSV
df.write.csv(csv_file_path, header=True)

# Print the file path
print(f"CSV file is created at: {csv_file_path}")

from pyspark.sql import SparkSession
from pyspark.sql.functions import col, avg, desc

# Create a Spark session
spark = SparkSession.builder \
    .appName("Movies Analysis") \
    .getOrCreate()

# Load the dataset
df = spark.read.csv("/content/movies_output.csv", header=True, inferSchema=True)

# Task 2: Filter Movies by Genre
sci_fi_movies = df.filter(col("genre") == "Sci-Fi")
sci_fi_movies.show()
sci_fi_movies.write.csv("sci_fi_movies.csv", header=True)

# Task 3: Top-Rated Movies
top_rated_movies = df.orderBy(desc("rating")).limit(3)
top_rated_movies.show()
top_rated_movies.write.csv("top_rated_movies.csv", header=True)

# Task 4: Movies Released After 2010
movies_after_2010 = df.filter(col("date") > "2010-01-01")
movies_after_2010.show()
movies_after_2010.write.csv("movies_after_2010.csv", header=True)

# Task 5: Calculate Average Box Office Collection by Genre
avg_box_office_by_genre = df.groupBy("genre").agg(avg("box_office").alias("average_box_office"))
avg_box_office_by_genre.show()
avg_box_office_by_genre.write.csv("avg_box_office_by_genre.csv", header=True)

# Task 6: Add a New Column for Box Office in Billions
df_with_billion = df.withColumn("box_office_in_billions", col("box_office") / 1e9)
df_with_billion.show()
df_with_billion.write.csv("df_with_billion.csv", header=True)

# Task 7: Sort Movies by Box Office Collection
sorted_movies = df.orderBy(desc("box_office"))
sorted_movies.show()
sorted_movies.write.csv("sorted_movies.csv", header=True)

# Task 8: Count the Number of Movies per Genre
movie_count_per_genre = df.groupBy("genre").count()
movie_count_per_genre.show()
movie_count_per_genre.write.csv("movie_count_per_genre.csv", header=True)

# Stop the Spark session
spark.stop()